{
  "title": "Direction of Force in Electric Fields",
  "publicationStatus": "draft",
  "subtitle": "How is the direction of force oriented between charged objects?",
  "aspectRatio": 1.6,
  "about": [
    "An electric field is produced by the stationary object in this simulation.",
    "How does the force on the draggable object change when it is moved around the stationary object?",
    "How the force affected by the polarity of the charge on the stationary object?",
    "Use the *trace force vectors* checkbox to help characterize the direction of force arrow when the charged object is in different positions."
  ],
  "models": [
    {
      "type": "md2d",
      "id": "forceDirectionVDG$0",
      "url": "imports/legacy-mw-content/converted/interactions/force-direction/forceDirection$0.json",
      "importedFrom": "imports/legacy-mw-content/interactions/force-direction/forceDirection$0.mml",
      "viewOptions": {
        "controlButtons": "reset"
      },
      "onLoad": [
          "onDrag('atom', function(x, y, d, i) {",
          "  if (getNumberOfTextBoxes() > 0) { removeTextBox(0); }",
          "  if( i === 0 ) {",
          "    var forceDirection = get('object-charge');",
          "    var dragAtomProps   = getAtomProperties(0);",
          "    var targetAtomProps = getAtomProperties(1);",
          "    var dx = targetAtomProps.x - dragAtomProps.x;",
          "    var dy = targetAtomProps.y - dragAtomProps.y;",
          "    var L = Math.sqrt(dx*dx + dy*dy);",
          "    var targetX = dragAtomProps.x + forceDirection * 0.4/L*dx;",
          "    var targetY = dragAtomProps.y + forceDirection * 0.4/L*dy;",
          "    setLineProperties(0, {x1: dragAtomProps.x, y1: dragAtomProps.y, x2: targetX, y2: targetY});",
          "    if( get('trace-force-vectors') ){",
          "      var tNow = getCurrentComputerTime();",
          "      if( tNow - get('last-trace-time') > 250 ) {",
          "        var traceidx = get('trace-idx');",
          "        setLineProperties(2 + traceidx, {x1: dragAtomProps.x, y1: dragAtomProps.y, x2: targetX, y2: targetY, visible: true});",
          "        set('trace-idx', (traceidx+1)%96);",
          "        set('last-trace-time', tNow);",
          "      }",
          "    }",
          "    targetX = targetAtomProps.x - forceDirection * 0.4/L*dx;",
          "    targetY = targetAtomProps.y - forceDirection * 0.4/L*dy;",
          "    setLineProperties(1, {x1: targetAtomProps.x, y1: targetAtomProps.y, x2: targetX, y2: targetY});",
          "  }",
          "});"
        ]
    }
  ],
  "parameters": [
    {
      "name": "last-trace-time",
      "initialValue": 0,
      "onChange": []
    },
    {
      "name": "trace-idx",
      "initialValue": 0,
      "onChange": []
    },
    {
      "name": "show-force-on-object",
      "initialValue": true,
      "onChange": "setLineProperties(0, {visible: value});"
    },
    {
      "name": "show-force-on-VDG",
      "initialValue": false,
      "onChange": "setLineProperties(1, {visible: value});"
    },
    {
      "name": "trace-force-vectors",
      "initialValue": false,
      "onChange": []
    },
    {
      "name": "object-charge",
      "initialValue": 1,
      "onChange": [
        "setAtomProperties(1,{charge: value});",
        "var forceDirection  = get('object-charge');",
        "var dragAtomProps   = getAtomProperties(0);",
        "var targetAtomProps = getAtomProperties(1);",
        "var dx = targetAtomProps.x - dragAtomProps.x;",
        "var dy = targetAtomProps.y - dragAtomProps.y;",
        "var L = Math.sqrt(dx*dx + dy*dy);",
        "var targetX = dragAtomProps.x + forceDirection * 0.4/L*dx;",
        "var targetY = dragAtomProps.y + forceDirection * 0.4/L*dy;",
        "setLineProperties(0, {x1: dragAtomProps.x, y1: dragAtomProps.y, x2: targetX, y2: targetY});",
        "targetX = targetAtomProps.x - forceDirection * 0.4/L*dx;",
        "targetY = targetAtomProps.y - forceDirection * 0.4/L*dy;",
        "setLineProperties(1, {x1: targetAtomProps.x, y1: targetAtomProps.y, x2: targetX, y2: targetY});",
        "batch( function() { ",
        "  for( var i = 2; i < 98; setLineProperties(i++, {visible: false})); // clear traces",
        "});"
      ]
    }
  ],
  "components": [
    {
      "type": "button",
      "id": "clear-trace",
      "text": "Clear",
      "action": [
        "batch( function() { ",
        "  for( var i = 2; i < 98; setLineProperties(i++, {visible: false})); // clear traces",
        "});"
      ]
    },
    {
      "type": "checkbox",
      "id": "toggle-show-force-on-object",
      "property": "show-force-on-object",
      "text": "Show force on draggable object"
    },
    {
      "type": "checkbox",
      "id": "toggle-show-force-on-VDG",
      "property": "show-force-on-VDG",
      "text": "Show force on stationary object"
    },
    {
      "type": "checkbox",
      "id": "toggle-trace-force-vectors",
      "property": "trace-force-vectors",
      "text": "Trace force vectors"
    },
    {
      "type": "text",
      "id": "label-forces",
      "text": "**Forces:**"
    },
    {
      "type": "text",
      "id": "label-tracing",
      "text": "**Tracing:**"
    },
    {
      "type": "text",
      "id": "label-direction",
      "text": "**Set charge on stationary object**"
    },
    {
      "type": "radio",
      "id": "select-charge",
      "property": "object-charge",
      "options": [
        {
          "text": "Positive",
          "value": 1
        },
        {
          "text": "Negative",
          "value": -1
        }
      ]
    }
  ],
  "layout": {
    "right": [
      ["label-forces"],
      ["toggle-show-force-on-object"],
      ["toggle-show-force-on-VDG"],
      ["label-tracing"],
      ["toggle-trace-force-vectors"],
      ["clear-trace"],
      ["label-direction"],
      ["select-charge"]
    ]
  },
  "template": "wide-right"
}
